generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Lesson {
    id        Int      @id @default(autoincrement())
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start         DateTime
    end           DateTime
    classroom     String
    index         Int
    startOfTheDay DateTime?
    // teacher     Teacher  @relation(fields: [teacherId, teacherName], references: [id, name])
    // teacherId   String
    teacherId     String?
    teacher       User?    @relation(fields: [teacherId], references: [id])

    Groups Group[]
    // Teacher   Teacher? @relation(fields: [teacherId], references: [id])
    // teacherId String?
}

// model Teacher {
//     id   String @id
//     name String
    // lessons Lesson[]

    // @@unique([id, name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    STUDENT
    TEACHER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    password      String
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    role Role

    group   Group?  @relation(fields: [groupId], references: [id])
    groupId String?
}

model Group {
    id    String @id @unique
    title String
    users User[]

    lessons Lesson[]

    @@index([title])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
