generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start DateTime
  end   DateTime
  index Int
  subgroup Int?

  teacherId String?
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])

  Groups Group[]
  Days   Day[]

  Classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId Int?
}

model Day {
  id    Int      @id @default(autoincrement())
  start DateTime

  Group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  teacherId String?
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])

  lessons Lesson[]
  User    User?    @relation(fields: [userId], references: [id])
  userId  String?

  @@unique([start, groupId])
  @@unique([start, teacherId])
}

model Classroom {
  id   Int    @id @default(autoincrement())
  name String

  Lessons Lesson[]
}

// model Teacher {
//     id   String @id
//     name String
// lessons Lesson[]

// @@unique([id, name])
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// enum Role {
//     STUDENT
//     TEACHER
//     ADMIN
// }

model Teacher {
  id   String @id
  name String

  Days   Day[]
  User   User?    @relation
  Lesson Lesson[]

  Favourite Favourite[]
}

model Favourite {
  id  String @id @default(cuid())

  userId    String
  type      String
  groupId   String?
  teacherId String?

  User    User     @relation(fields: [userId], references: [id])
  Group   Group?   @relation(fields: [groupId], references: [id])
  Teacher Teacher? @relation(fields: [teacherId], references: [id])

  @@unique([userId, groupId])
  @@unique([userId, teacherId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  role          Int       @default(1)

  Group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  teacherId String?  @unique
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])

  Day        Day[]
  Favourites Favourite[]
}

model Group {
  id    String @id @unique
  title String
  users User[]

  Days      Day[]
  Lessons   Lesson[]
  Favourite Favourite[]

  @@index([title])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
