generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start    DateTime
  end      DateTime
  index    Int
  subgroup Int?

  teacherId String?
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])

  groupId String?
  Group   Group?  @relation(fields: [groupId], references: [id])

  // Days   Day[]
  startDay DateTime @default(now())

  Classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId Int?

  shouldDisplayForStudents Boolean @default(true)
}

model Day {
  id    Int      @id @default(autoincrement())
  start DateTime

  Group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  teacherId String?
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])

  // lessons Lesson[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([start, groupId])
  @@unique([start, teacherId])
}

model Classroom {
  id   Int    @id @default(autoincrement())
  name String @unique

  Lessons Lesson[]
}

model Teacher {
  id   String @id
  name String

  Days   Day[]
  Lesson Lesson[]

  Users User[]

  Favourite Favourite[]
}

model Favourite {
  id String @id @default(cuid())

  userId    String
  type      String
  groupId   String?
  teacherId String?

  User    User     @relation(fields: [userId], references: [id])
  Group   Group?   @relation(fields: [groupId], references: [id])
  Teacher Teacher? @relation(fields: [teacherId], references: [id])

  @@unique([userId, groupId])
  @@unique([userId, teacherId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  isAdmin       Boolean   @default(false)
  email         String    @unique
  password      String
  emailVerified DateTime?
  role          Int       @default(1)

  isNotificationsEnabled Boolean @default(false)

  Group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  Teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?

  Day              Day[]
  Favourites       Favourite[]
  ErrorReport      ErrorReport[]
  PushSubscription PushSubscription[]
}

model Report {
  id        Int      @id @default(autoincrement())
  startedAt DateTime
  endedAt   DateTime
  result    String
}

model Group {
  id    String @id @unique
  title String
  users User[]

  Days      Day[]
  Lessons   Lesson[]
  Favourite Favourite[]

  @@index([title])
}

model Config {
  id                      String @id @default("config")
  parseSpreadsheetPageUrl String @default("https://urtt.ru/students/dnevnoe/raspisaniya/")
  parseInterval           Int    @default(1200000)
}

model ErrorReport {
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  message  String
  filePath String
  userId   String?
  User     User?    @relation(fields: [userId], references: [id])
}

model PushSubscription {
  id       String @id @default(cuid())
  endpoint String
  keys     String
  userId   String
  User     User   @relation(fields: [userId], references: [id])
}
